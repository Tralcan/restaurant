// This file is generated by Gemini. For more information, see the LICENSE
'use server';
/**
 * @fileOverview This file defines a Genkit flow to get sub-cuisines for a given cuisine type.
 *
 * - getSubCuisines - A function that calls the getSubCuisinesFlow and returns a list of sub-cuisines.
 * - GetSubCuisinesInput - The input type for the getSubCuisines function.
 * - GetSubCuisinesOutput - The output type for the getSubCuisines function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GetSubCuisinesInputSchema = z.object({
  cuisine: z.string().describe('The main cuisine type (e.g., Italian).'),
});
export type GetSubCuisinesInput = z.infer<typeof GetSubCuisinesInputSchema>;

const GetSubCuisinesOutputSchema = z.object({
  subCuisines: z
    .array(z.string())
    .describe('A list of dynamically generated sub-cuisines (e.g., pizza, pasta, risotto).'),
});
export type GetSubCuisinesOutput = z.infer<typeof GetSubCuisinesOutputSchema>;

export async function getSubCuisines(input: GetSubCuisinesInput): Promise<GetSubCuisinesOutput> {
  return getSubCuisinesFlow(input);
}

const getSubCuisinesPrompt = ai.definePrompt({
  name: 'getSubCuisinesPrompt',
  input: {schema: GetSubCuisinesInputSchema},
  output: {schema: GetSubCuisinesOutputSchema},
  prompt: `You are a helpful assistant that suggests sub-cuisines for a given cuisine.

  Suggest a list of sub-cuisines for the following cuisine type:

  {{cuisine}}

  Return the sub-cuisines as a JSON array of strings.`,
});

const getSubCuisinesFlow = ai.defineFlow(
  {
    name: 'getSubCuisinesFlow',
    inputSchema: GetSubCuisinesInputSchema,
    outputSchema: GetSubCuisinesOutputSchema,
  },
  async input => {
    const {output} = await getSubCuisinesPrompt(input);
    return output!;
  }
);
